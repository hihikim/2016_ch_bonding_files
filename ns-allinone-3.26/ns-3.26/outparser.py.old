import xlsxwriter
from parse_utils import *
import math

algorithms = ('opt', 'proposed', 'waterfall')

class Parser:
    def __init__(self, ap_path, sta_path, env_str):
        self.workbook_name = "TotalOutput_%s.xlsx" % env_str
        self.workbook = xlsxwriter.Workbook(self.workbook_name)
        self.worksheet = None
        self.ap_file = None
        self.sta_file = None
        self.ap_dir_path = ap_path
        self.sta_dir_path = sta_path

    def parsing(self):
        for algo in algorithms:
            print("Algorithm: " + algo)
            ap_path = self.ap_dir_path + algo + '/'
            sta_path = self.sta_dir_path + algo + '/'
            for root, dirs, files in os.walk(ap_path):
                for file_name in files:
                    self.worksheet = self.workbook.add_worksheet(algo+file_name)
                    self.ap_file = open(ap_path + file_name, 'r')
                    self.sta_file = open(sta_path + file_name, 'r')
                    self.printToSheet()
                    self.ap_file.close()
                    self.sta_file.close()

        self.workbook.close()

    def printToSheet(self):
        worksheet = self.worksheet
        row = 1
        col = 2
        is_first = False
        first_time = True
        ap_row = 0

        ap_index = []

        throughput_vals = {}
        # now_time = 0
        now_name = ''

        for line in self.ap_file.readlines():
            if not line.find('---') > -1:
                val_index = line.find(' :')

                if val_index == -1 :
                    continue

                token = line[0:val_index]
                value = line[val_index+3:]

                value = value.replace('\n', '')

                if token == 'Time':
                    if first_time :
                        is_first = True
                        first_time = False

                    worksheet.write_string(1, col, value)
                    # now_time = value

                elif token == 'index':
                    row += 1
                    # now_name = 'ap_' + str(value) + '_time_'+now_time
                    now_name = 'ap_' + str(value)
                    if  is_first :
                        worksheet.write_string(row, 0, "AP " + value)
                        worksheet.write(row, 1, 'throughput')
                        worksheet.write(row+1, 1, 'average throughput')
                        worksheet.write(row+2, 1, 'minimum throughput')
                        worksheet.write(row+3, 1, 'maximum throughput')
                        worksheet.write(row+4, 1, 'total throughput/demand(%)')
                        ap_index.append(row+4)

                elif token in ('throughput', 'average throughput', 'minimum throughput', 'maximum throughput',
                               'total throughput / demand(%)'):
                    value = float(value)
                    worksheet.write(row, col, value)
                    row += 1
                    if token == 'throughput':
                        # print token
                        throughput_vals[now_name] = value

                elif token.find('Channel') > -1:
                    if is_first :
                        worksheet.write(row, 1, token)

                    value = float(value)
                    worksheet.write(row, col, value)
                    row += 1

            else:
                col += 1
                is_first = False
                if ap_row < row :
                    ap_row = row
                row = 1

        query = "= AVERAGE("

        is_first = True

        for row_val in ap_index:
            if not is_first:
                query += ', '
            else :
                is_first = False

            query += self.get_cell_addr(row_val, col-1)

        query += ')'

        worksheet.write(2, col + 2, 'ap_gamma avg')
        worksheet.write(2, col + 3, query)

        query_denominator = "SUM("
        query_numerator = "SUM("

        is_first = True
        for row_val in ap_index:
            if not is_first:
                query_numerator += ', '
                query_denominator += ', '
            else :
                is_first = False
            cell_name = self.get_cell_addr(row_val-3,col-1)
            query_numerator += cell_name
            query_denominator += (cell_name + ' ^ 2')

        query_numerator += ') ^ 2'
        query_denominator += (') * ' + str(len(ap_index)))

        query = '= (' + query_numerator+')' + ' / (' + query_denominator + ')'

        worksheet.write(4, col + 2, 'ap_throughput fairness')
        worksheet.write(4, col + 3, query)

        query_denominator = "SUM("
        query_numerator = "SUM("

        is_first = True
        for row_val in ap_index:
            if not is_first:
                query_numerator += ', '
                query_denominator += ', '
            else :
                is_first = False
            cell_name = self.get_cell_addr(row_val,col-1)
            query_numerator += cell_name
            query_denominator += (cell_name + ' ^ 2')

        query_numerator += ') ^ 2'
        query_denominator += (') * ' + str(len(ap_index)))

        query = '= (' + query_numerator+')' + ' / (' + query_denominator + ')'

        worksheet.write(6, col + 2, 'ap_gamma fairness')
        worksheet.write(6, col + 3, query)

        col = col+5
        temp_row = 2
        sorted_list = []
        for y, v in sorted(throughput_vals.items(), key=lambda x: x[1]):
            sorted_list.append(y)
            # worksheet.write(temp_row, col, y)
            # worksheet.write(temp_row, col + 1, v)
            # temp_row += 1

        worksheet.write(temp_row, col, "lower 10%")
        temp_row += 1

        size_list = len(sorted_list)

        for key in sorted_list[:int(math.ceil(size_list / 10.0))]:
            worksheet.write(temp_row, col, key)
            worksheet.write(temp_row, col + 1, throughput_vals[key])
            temp_row += 1

        temp_row += 1
        worksheet.write(temp_row, col, "median")
        temp_row += 1

        if size_list % 2 == 0:
            worksheet.write(temp_row, col, sorted_list[int(size_list/2 - 1)])
            worksheet.write(temp_row, col + 1, throughput_vals[sorted_list[int(size_list/2 - 1)]])
            temp_row += 1

        worksheet.write(temp_row, col, sorted_list[int(size_list/2)])
        worksheet.write(temp_row, col + 1, throughput_vals[sorted_list[int(size_list/2)]])
        temp_row += 1

        temp_row += 1
        worksheet.write(temp_row, col, "upper 10%")
        temp_row += 1

        for key in sorted_list[int(math.floor(size_list / 10.0 * 9.0)):]:
            worksheet.write(temp_row, col, key)
            worksheet.write(temp_row, col + 1, throughput_vals[key])
            temp_row += 1

        row = ap_row + 2
        col = 2
        is_first = False
        first_time = True

        sta_index = []

        for line in self.sta_file.readlines():
            if not line.find('---') > -1:
                val_index = line.find(' :')

                if val_index == -1:
                    continue

                token = line[0:val_index]
                value = line[val_index+3:]

                value = value.replace('\n', '')

                if token == 'Time':
                    if first_time:
                        is_first = True
                        first_time = False

                    worksheet.write(ap_row+2, col, value)

                elif token == 'index':
                    row += 1
                    if is_first:
                        worksheet.write(row, 0, "STA " + value)
                        worksheet.write(row, 1, 'throughput')
                        worksheet.write(row+1, 1, 'average throughput')
                        worksheet.write(row+2, 1, 'minimum throughput')
                        worksheet.write(row+3, 1, 'maximum throughput')
                        worksheet.write(row+4, 1, 'throughput/demand(%)')
                        sta_index.append(row+4)

                elif token in ('throughput', 'average throughput', 'minimum throughput', 'maximum throughput', 'throughput/demand(%)') :
                    value = float(value)
                    worksheet.write(row, col, value)
                    row += 1

            else:
                col += 1
                is_first = False
                row = ap_row + 2

        query = "= AVERAGE("

        is_first = True
        for row_val in sta_index:
            if not is_first:
                query += ', '
            else :
                is_first = False

            query += self.get_cell_addr(row_val,col-1)

        query += ')'

        worksheet.write(3, col + 2, 'sta_gamma avg')
        worksheet.write(3, col + 3, query)

        query_denominator = "SUM("
        query_numerator = "SUM("

        is_first = True
        for row_val in sta_index:
            if not is_first:
                query_numerator += ', '
                query_denominator += ', '
            else :
                is_first = False
            cell_name = self.get_cell_addr(row_val-3,col-1)
            query_numerator += cell_name
            query_denominator += (cell_name + ' ^ 2')

        query_numerator += ') ^ 2'
        query_denominator += (') * ' + str(len(sta_index)))

        query = '= (' + query_numerator+')' + ' / (' + query_denominator + ')'

        worksheet.write(5, col +2, 'sta_throughput fairness')
        worksheet.write(5, col +3, query)

        query_denominator = "SUM("
        query_numerator = "SUM("

        is_first = True
        for row_val in sta_index:
            if not is_first:
                query_numerator += ', '
                query_denominator += ', '
            else:
                is_first = False
            cell_name = self.get_cell_addr(row_val, col-1)
            query_numerator += cell_name
            query_denominator += (cell_name + ' ^ 2')

        query_numerator += ') ^ 2'
        query_denominator += (') * ' + str(len(sta_index)))

        query = '= (' + query_numerator+')' + ' / (' + query_denominator + ')'

        worksheet.write(7, col + 2, 'sta_gamma fairness')
        worksheet.write(7, col + 3, query)

    def get_cell_addr(self, row, col):
        row += 1
        result = ""

        while True:
            remain = col % 26
            col = int(col / 26)
            remain += ord("A")

            result = str(chr(remain)) + result
            if col is 0:
                break

        result += str(row)
        return result


# Main function to run
if __name__ == "__main__":
    apStrList = ['05', '10', '20']
    staStrList = ['10', '50', '100']

    for apStr in apStrList:
        for staStr in staStrList:
            file_str = "%sap_%ssta" % (apStr, staStr)

            file_dir_output_str = "./outputs/" + file_str + "_10m_result/output/"

            g_ap_dir_path = file_dir_output_str + 'ap/'
            g_sta_dir_path = file_dir_output_str + 'sta/'

            check_path(g_ap_dir_path)
            check_path(g_sta_dir_path)

            parser = Parser(g_ap_dir_path, g_sta_dir_path, file_str)
            parser.parsing()

